apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

compileJava {
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport.dependsOn test

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation "org.assertj:assertj-core:$assertJ"
    testImplementation 'com.google.testing.compile:compile-testing:0.15'
    testImplementation project(path: ':integration-test-java')
    testImplementation project(path: ':integration-test-java-cross-module')

    // Forcibly add test resources to test classpath: https://code.google.com/p/android/issues/detail?id=64887
    testRuntime files('build/resources/test')

    implementation project(':stag-library')

    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation 'com.squareup:javapoet:1.10.0'
    implementation 'com.intellij:annotations:12.0@jar'
    implementation 'com.google.auto.service:auto-service:1.0-rc3'

    // Used by both auto-service and compile-testing, we need to resolve the version for them.
    implementation 'com.google.guava:guava:23.5-jre'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion"
}

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

tasks.withType(Javadoc).all { enabled = true }

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

// Create the pom configuration
// All the fields below are required by Maven Central
def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "vimeo"
            name "Vimeo Mobile"
            email "mobileops@vimeo.com"
            organisation "Vimeo"
            organisationUrl "https://github.com/vimeo"
        }
    }

    scm {
        connection "scm:git:git://github.com/vimeo/stag-java.git"
        developerConnection "scm:git:ssh://github.com:vimeo/stag-java.git"
        url "https://github.com/vimeo/stag-java"
    }
}

// Create the publication with the pom configuration:
// Requires apply plugin: maven-publish
publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'stag-library-compiler'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Stag improves Gson performance by automatically generating reflection-less TypeAdapters for your model objects.')
                root.appendNode('name', 'stag-library-compiler')
                root.appendNode('url', 'https://github.com/vimeo/stag-java')
                root.children().last() + pomConfig
            }
        }
    }
}

// Only execute the bintray task if this is the actual networking project (not an include)
allprojects {
    afterEvaluate { project ->
        def bintrayProject = project.plugins.hasPlugin('com.jfrog.bintray')
        if (bintrayProject) {
            bintray {
                user = System.getenv('BINTRAY_USER')
                // api key
                key = System.getenv('BINTRAY_API_KEY')
                publications = ['MyPublication']
                dryRun = false // Whether to run this as dry-run, without deploying
                override = false
                pkg {
                    repo = 'maven'
                    name = 'stag-library-compiler'
                    userOrg = 'vimeo'
                    licenses = ['MIT']
                    websiteUrl = 'https://github.com/vimeo/stag-java'
                    issueTrackerUrl = 'https://github.com/vimeo/stag-java/issues'
                    vcsUrl = 'https://github.com/vimeo/stag-java.git'
                    labels = ['vimeo', 'gson', 'annotation']
                    publicDownloadNumbers = true
                    version {
                        name = project.version
                        vcsTag = project.version
                        gpg {
                            sign = true
                            passphrase = System.getenv('BINTRAY_GPG_PASSWORD')
                        }
                        mavenCentralSync {
                            sync = true
                            // Optional (true by default). Determines whether to sync the version to Maven Central.
                            user = System.getenv('SONATYPE_TOKEN_USER') // OSS user token
                            password = System.getenv('SONATYPE_TOKEN_PASSWORD') // OSS user password
                            close = '1'
                            // Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                        }
                    }
                }
            }
        }
    }
}
